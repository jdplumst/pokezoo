name: Vercel Deploy

on:
  # Only trigger when the last test workflow (Playwright Tests) completes
  workflow_run:
    workflows: ["Playwright Tests"]
    branches: [main, master]
    types: [completed]
  workflow_dispatch:
    inputs:
      reason:
        description: "Reason for manual deployment"
        required: true
        default: "Manual deployment triggered"

jobs:
  verify-tests:
    name: Verify All Tests Passed
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    outputs:
      all_passed: ${{ steps.verify.outputs.all_passed }}
    steps:
      - name: Verify all test workflows passed
        id: verify
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const runId = context.payload.workflow_run.run_id;
            const commitSha = context.payload.workflow_run.head_sha;

            // Check the status of all required workflows for this commit
            const { data: workflows } = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              head_sha: commitSha,
              event: 'push',
              status: 'completed'
            });

            // List of required workflow names
            const requiredWorkflows = new Set([
              'Unit Tests',
              'Integration Tests',
              'Check',
              'Playwright Tests'
            ]);

            // Track which workflows have passed
            const passedWorkflows = new Set();

            // Check each workflow run
            for (const run of workflows.workflow_runs) {
              if (requiredWorkflows.has(run.name)) {
                if (run.conclusion === 'success') {
                  passedWorkflows.add(run.name);
                } else if (run.conclusion === 'failure') {
                  console.log(`Workflow ${run.name} failed`);
                  core.setFailed(`Required workflow ${run.name} failed`);
                  core.setOutput('all_passed', 'false');
                  return;
                }
              }
            }

            // Verify all required workflows have passed
            for (const workflow of requiredWorkflows) {
              if (!passedWorkflows.has(workflow)) {
                console.log(`Workflow ${workflow} did not complete successfully`);
                core.setFailed(`Required workflow ${workflow} did not complete successfully`);
                core.setOutput('all_passed', 'false');
                return;
              }
            }

            console.log('All required workflows passed successfully');
            core.setOutput('all_passed', 'true');

  # Only run the deploy if all tests passed
  deploy:
    name: Deploy to Vercel
    needs: verify-tests
    if: ${{ github.event_name == 'workflow_dispatch' || (needs.verify-tests.outputs.all_passed == 'true') }}
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest

      - name: Configure Vercel
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Configuring Vercel..."
          vercel link --yes --token ${{ secrets.VERCEL_TOKEN }} --project $VERCEL_PROJECT_ID

      - name: Build and Deploy to Vercel
        id: vercel-deploy
        env:
          # Only need Vercel auth tokens
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          # Pull environment and project settings (this will use Vercel's env vars)
          echo "Pulling Vercel project configuration..."
          vercel pull --yes --environment=production --token=$VERCEL_TOKEN
          
          # Build the project using Vercel's environment variables
          echo "Building project..."
          vercel build --token=$VERCEL_TOKEN
          
          # Deploy to production using Vercel's environment variables
          echo "Deploying to production..."
          vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN
