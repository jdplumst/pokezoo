// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  admin           Boolean
  username        String?
  totalYield      Int
  balance         Int
  instanceCount   Int
  claimedDaily    Boolean
  claimedNightly  Boolean
  instances       Instance[]
  commonCards     Int               @default(0)
  rareCards       Int               @default(0)
  epicCards       Int               @default(0)
  legendaryCards  Int               @default(0)
  johtoStarter    Boolean
  hoennStarter    Boolean
  sinnohStarter   Boolean
  unovaStarter    Boolean
  UserAchievement UserAchievement[]
  TradeInitiator  Trade[]           @relation("initiator")
  TradeOfferer    Trade[]           @relation("offerer")
}

model VerificationToken {
  identifier String   @id @default(cuid())
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Species {
  id            String       @id @default(cuid())
  pokedexNumber Int
  name          String
  rarity        Rarity
  yield         Int
  img           String
  instances     Instance[]
  sellPrice     Int
  shiny         Boolean
  typeOne       SpeciesType
  typeTwo       SpeciesType?
  generation    Int
  region        Region
  habitat       Habitat
}

model Instance {
  id             String   @id @default(cuid())
  userId         String
  speciesId      String
  createDate     DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  species        Species  @relation(fields: [speciesId], references: [id], onDelete: Cascade)
  TradeInitiator Trade[]  @relation("initiatorInstance")
  TradeOfferer   Trade[]  @relation("offererInstance")

  @@index([userId])
  @@index([speciesId])
}

model Ball {
  id              String @id @default(cuid())
  name            String @unique
  img             String
  cost            Int
  commonChance    Int
  rareChance      Int
  epicChance      Int
  legendaryChance Int
}

model Achievement {
  id              String            @id @default(cuid())
  description     String
  generation      Int
  region          Region
  type            AchievementType
  attribute       Attribute
  shiny           Boolean
  tier            Int
  yield           Int
  UserAchievement UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  createDate    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([achievementId])
}

model Trade {
  id                  String    @id @default(cuid())
  initiatorId         String
  offererId           String?
  initiatorInstanceId String
  offererInstanceId   String?
  description         String?
  createDate          DateTime  @default(now())
  modifyDate          DateTime  @default(now())
  initiator           User      @relation("initiator", fields: [initiatorId], references: [id])
  offerer             User?     @relation("offerer", fields: [offererId], references: [id])
  initiatorInstance   Instance  @relation("initiatorInstance", fields: [initiatorInstanceId], references: [id])
  offererInstance     Instance? @relation("offererInstance", fields: [offererInstanceId], references: [id])

  @@index([initiatorId])
  @@index([offererId])
  @@index([initiatorInstanceId])
  @@index([offererInstanceId])
}

enum Rarity {
  Common
  Rare
  Epic
  Legendary
}

enum Region {
  Kanto
  Johto
  Hoenn
  Sinnoh
  Unova
}

enum SpeciesType {
  Normal
  Grass
  Bug
  Fire
  Electric
  Ground
  Water
  Fighting
  Poison
  Rock
  Ice
  Ghost
  Psychic
  Fairy
  Dark
  Dragon
  Steel
  Flying
}

enum Habitat {
  Grassland
  Forest
  WatersEdge
  Sea
  Cave
  Mountain
  RoughTerrain
  Urban
  Rare
}

enum Attribute {
  Common
  Rare
  Epic
  Legendary
  Grassland
  Forest
  WatersEdge
  Sea
  Cave
  Mountain
  RoughTerrain
  Urban
  Normal
  Fire
  Fighting
  Water
  Flying
  Grass
  Poison
  Electric
  Ground
  Psychic
  Rock
  Ice
  Bug
  Dragon
  Ghost
  Steel
  Fairy
  Dark
  All
}

enum AchievementType {
  Rarity
  Habitat
  Type
  All
}
